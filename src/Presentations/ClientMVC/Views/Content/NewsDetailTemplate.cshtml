@using Models.Entities
@model ContentDto
@{
    ViewData["Title"] = "NewsDetailTemplate";
}
<div class="row">
    <div class="col-xs-12 col-md-12">
        <h1>@Model.Title</h1>
    </div>
</div>
<div class="row mb-2">
    <div class="col-xs-12 col-md-12">
        @foreach (var item in Model.NewsKeywords)
        {
            <a class="link-unstyled" href="/" title="@item.Keyword"><span class="badge badge-light">@item.Keyword</span></a>
        }
    </div>
</div>
<div class="row">
    <div class="col-xs-12 col-md-8">
        <div class="row">
            <div class="col-xs-12 col-md-12">
                <img src="@Model.MainArtUrl" alt="NewsSite" tite="NewsSite" class="img-fluid">
            </div>
        </div>
        <div class="row">
            <div class="col-xs-6 col-md-6">
                <p class="font-weight-bold">@Model.SourcesData?.FirstOrDefault().Title</p>
            </div>
            <div class="col-xs-6 col-md-6">
                <p class="text-right"><time>@Convert.ToDateTime(Model.PublishedTime).ToString("dd MMMM yyyy - HH:mm")</time></p>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-md-12">
                <p class="font-weight-bold">
                    @Model.Spot
                </p>
                <p>
                    @Html.Raw(Model.Text)
                </p>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <h2 class="mb-4">İlgili Haberler</h2>
        @{ 
            foreach (var item in Model.Story.Contents)
            {
                if(!string.IsNullOrEmpty(item._t))
                {
                    await Html.RenderPartialAsync($"~/Views/Partials/_{item._t}.cshtml", item);
                }
            }
        }
    </div>
</div>


